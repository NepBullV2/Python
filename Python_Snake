from sense_hat import SenseHat
from time import sleep
import random
import pygame
from pygame.locals import *

#Core Functions
Draw = SenseHat()
msg = SenseHat()
Joystick = SenseHat()

class Snake: ######################################################################################################################################################################################

    # Variables
    Head_Color = (0,255,0)
    Body_Color = (0,50,0)
    Length = 1
    Tail = [[0,0]]
    Head = [4,4]

    # Draw the head of the snake
    def DrawHead():
        Draw.set_pixels(Snake.Head[0], Snake.Head[1], Snake.Head_Color) # Take cordinates of snakes head and print them on SenseHat

    # Draw the rest of the snake's body
    def DrawBody():
        # Set's the front of the body to be the same as the head
        SnakeTail[0][0] = Snake.Head[0]        
        SnakeTail[0][1] = Snake.Head[1]

        # A backwards loop (starts from end and counts down till beginning)
        for i in reversed(range(len(Snake.Tail))):
            Snake.Tail[i][0] = Snake.Tail[i - 1][0] # Takes the x position from the previous index of the array
            Snake.Tail[i][1] = Snake.Tail[i - 1][1] # Takes the y position from the previous index of the array
        
        # A normal loop to print the rest of the snake
        for i in range(len(Snake.Tail)):
            Draw.set_pixel(Snake.Tail[i][0], Snake.Tail[i][1], Snake.Body_Color) # Draw the tiles of snake body

    # Add more to the snake's body
    def AddLength(x,y):
        Snake.Tail.insert(Snake.Length, [x,y]) # Inserts new tile into snake body



class Controls: ####################################################################################################################################################################################

    # Variables
    Direction = 0 # Snake Direction
    # 0 = UP
    # 1 = DOWN
    # 2 = LEFT
    # 3 = RIGHT

    #Movement Functions
    def MoveUp(event):
        if event.action == 'pressed': # If the stick is flicked up
            Controls.Direction = 0 # Change Direction to Up
    def MoveDown(event):
        if event.action == 'pressed': # If the stick is flicked down
            Controls.Direction = 1 # Change Direction to Down
    def MoveLeft(event):
        if event.action == 'pressed': # If the stick is flicked left
            Controls.Direction = 2 # Change Direction to Left
    def MoveRight(event):
        if event.action == 'pressed': # If the stick is flicked right
            Controls.Direction = 3 # Change Direction to Right

    def Update():
        Snake.DrawBody() # Draw the body Function
        if Controls.Direction == 0: # If the direction is set to up
            Snake.Head[1] -= 1 # Lower y axis by 1
        if Controls.Direction == 1: # If the direction is set to down
            Snake.Head[1] += 1 # Raise y axis by 1
        if Controls.Direction == 2: # If the direction is set to left
            Snake.Head[0] -= 1 # Lower x axis by 1
        if Controls.Direction == 3: # If the direction if set to right
            Snake.Head[0] += 1 # Raise x axis by 1
        Snake.DrawHead() # Draw the head Function

    #Joystick Controls
    def ChangeDirection():
        Joystick.stick.direction_up = Controls.MoveUp # Flick Joystick Up
        Joystick.stick.direction_down = Controls.MoveDown # Flick Joystick Down
        Joystick.stick.direction_Left = Controls.MoveLeft # Flick Joystick Left
        Joystick.stick.direction_Right = Controls.MoveRight # Flick Joystick Right

    #Input from main class
    def Input():
        Controls.ChangeDirection() # Call ChangeDirection Function
        Controls.Update() # Call Update Function
        Apple.Check() # Call the Apple Check Function

class Apple: ######################################################################################################################################################################################

    # Variables
    Color = (255,0,0) # Color of the Apple
    Pos_x = random.randint(1,6) # Random int between 1 and 6
    Pos_y = random.randint(1,6) # Random int between 1 and 6

    #Place new Apple
    def NewApple():
        for i in range(len(Snake.Tail)): # loop through the snake body
            if Apple.Pos_x != Snake.Tail[i][0] and Apple.Pos_y != Sake.Tail[i][1]: # Check if the position of the apple is not within the snake's body
                Snake.AddLength(Snake.Head[0], Snake.Head[1]) # Adds a tile to snake's body
                Snake.Length += 1 # Increase Snake Length by 1
                Draw.set_pixel(Apple.Pos_x, Apple.Pos_y, Apple.Color) # Place new apple on given cordinates
                break
            else:
                pass

    #Check if a new Apple is needed
    def Check():
        if Snake.Head[0] == Apple.Pos_x and Snake.Head[1] == Apple.Pos_y: # Check if snake head had reached the apple
            Apple.NewApple() # call the NewApple Function
        else: # If snake head has not reached the apple
            Draw.set_pixel(Apple.Pos_x, Apple.Pos_y, Apple.Color) # Maintain the apple position

class Map: #########################################################################################################################################################################################

    # Variables
    w = (255,100,0) # Wall
    f = (100,100,100) # Field

    # Map Layout (w = walls, f = the playfield the snake can move in)
    Border = [[w,w,w,w,w,w,w,w],
              [w,f,f,f,f,f,f,w],
              [w,f,f,f,f,f,f,w],
              [w,f,f,f,f,f,f,w],
              [w,f,f,f,f,f,f,w],
              [w,f,f,f,f,f,f,w],
              [w,f,f,f,f,f,f,w],
              [w,w,w,w,w,w,w,w]]

class Main: #########################################################################################################################################################################################

    #Game Condition Variables
    GameRunning = False

    def CheckCollision(): # Checks if the snake has collided with anything other than the apple
        if Snake.Head[0] == 0 or Snake.Head[1] == 0: # Checks if snake head has reached left and upper wall
            IsGameOver = True # Set Game Over Variable to True
            msg.show_message("Game Over") # Tells the player he sucks
        elif Snake.Head[0] == 7 or Snake.Head[1] == 7: #Checks if snake head has hit the right and lower wall
            IsGameOver = True # Sets game over variable to true
            msg.show_message("Game Over") # Tells the player he sucks

        # Checks if the snake is eating itself
        elif Snake.Head[0] == Snake.Body_Color or Snake.Head[1] == Snake.Body_Color:
            IsGameOver = True # Sets game over variable to true
            msg.show_message("Game Over") # Tells the player he sucks

    def RunGame(): # Start Game Function
        while IsGameOver == False: # run while game over is false
            Draw.set_pixels(sum(Map.Border, [])) # Draw the map
            Controls.Input() # Call the Input Function
            CheckCollision() # Check for Collision
            if IsGameOver == True: # Checks if game over has been set to True
                break # Break the loop
            sleep(0.5) # 0.5 second delay

    def StartGame(event): # Initiate Start Function
        if event.action == 'pressed': # Checks if joystick was pressed
            GameRunning = True # Set game running to true
            IsGameOver = False # Set game over to false
            RunGame() # Call run game function

    while GameRunning == False: # run while game running is set to false
        msg.show_message("Press the middle stick to start game") # tells player to press middle stick to start
        Joystick.stick.direction_middle = Main.StartGame # call Startgame function if middle stick is pressed
